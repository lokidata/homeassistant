# SEMAINE
input_datetime:
  heating_sdb_start_1:
    name: "Confort : Début"
    has_date: false
    has_time: true
  heating_sdb_end_1:
    name: "Confort : Fin"
    has_date: false
    has_time: true
#TELETRVAIL
  heating_sdb_start_1_t:
    name: "Confort : Début"
    has_date: false
    has_time: true
  heating_sdb_end_1_t:
    name: "Confort : Fin"
    has_date: false
    has_time: true

# WEEKEND
  heating_sdb_start_1_w:
    name: "Confort : Début"
    has_date: false
    has_time: true
  heating_sdb_end_1_w:
    name: "Confort : Fin"
    has_date: false
    has_time: true

binary_sensor:
  - platform: template
    sensors:
      heating_sdb_1: # SEMAINE
        friendly_name: Mode Confort
        value_template: >
          {% set t = states('sensor.time') %}
          {% set start = states('input_datetime.heating_sdb_start_1') [0:5] %}
          {% set stop = states('input_datetime.heating_sdb_end_1') [0:5] %}
          {{ (start <= t < stop if start < stop else (start <= t or t < stop)) == true
            and states('input_select.workday') == 'Bureau' 
            and states('binary_sensor.workday_status') == 'on'
            and states('input_boolean.heating_sdb_enabled_1') == 'on' }}
      heating_sdb_1_t: # TELETRVAIL
        friendly_name: Mode Confort
        value_template: >
          {% set t = states('sensor.time') %}
          {% set start = states('input_datetime.heating_sdb_start_1_t') [0:5] %}
          {% set stop = states('input_datetime.heating_sdb_end_1_t') [0:5] %}
          {{ (start <= t < stop if start < stop else (start <= t or t < stop)) == true
            and states('input_select.workday') == 'Télétravail'
            and states('binary_sensor.workday_status') == 'on'
            and states('input_boolean.heating_sdb_enabled_1_t') == 'on' }}
      heating_sdb_1_w: # WEEKEND
        friendly_name: Mode Confort
        value_template: >
          {% set t = states('sensor.time') %}
          {% set start = states('input_datetime.heating_sdb_start_1_w') [0:5] %}
          {% set stop = states('input_datetime.heating_sdb_end_1_w') [0:5] %}
          {{ (start <= t < stop if start < stop else (start <= t or t < stop)) == true
            and states('binary_sensor.not_workday_status') == 'on'
            and states('input_boolean.heating_sdb_enabled_1_w') == 'on' }}
      power_rad_sdb_dispo:
        friendly_name: Puissance dispo
        value_template: >
          {{ states('sensor.linky_i_sousc') | int *200 - states('sensor.linky_papp') | int <= 1000}} 

input_boolean:
  heating_sdb_enabled_1: #SEMAINE
    name: Plage Active
    icon: mdi:toggle-switch
  heating_sdb_enabled_1_t: #TELETRAVAIL
    name: Plage Active
    icon: mdi:toggle-switch
  heating_sdb_enabled_1_w: # WEEKEND
    name: Plage Active
    icon: mdi:toggle-switch
  heating_sdb_boost: # WEEKEND
    name: Mode Boost
    icon: mdi:toggle-switch
  power_rad_sdb_ok:
    name: Thermostat activé
    icon: mdi:toggle-switch

script:
  heating_sdb_boost:
    alias: Boost sdb
    icon: mdi:timer-outline
    sequence:
    - event: schedy_set_value
      event_data:
        app_name: schedy_heating
        room: salledebain
        v: '{{ states.input_number.sdb_boost_temperature.state }}'
        rescheduling_delay: '{{ states.input_number.heating_sdb_time_boost.state }}'

  heating_sdb_boost_reset:
    alias: "Boost sdb: Reset"
    icon: mdi:timer-off-outline
    sequence:
    - event: schedy_set_value
      event_data:
        app_name: schedy_heating
        room: salledebain
        v:  'OFF'
        rescheduling_delay: 1

input_number:

  heating_sdb_time_boost:
    name: 'Boost : Durée'
    initial: 60
    min: 5
    max: 360
    step: 5
    unit_of_measurement: Min.
    icon: 'mdi:clock'
  sdb_boost_temperature:
    name: Température Boost
    min: 14
    max: 26
    step: 0.5
    unit_of_measurement: °C
    icon: 'mdi:thermometer-lines'
  sdb_confort_temperature:
    name: Température Confort
    min: 14
    max: 26
    step: 0.5
    unit_of_measurement: °C
    icon: 'mdi:thermometer-lines'

sensor:
- platform: template
  sensors:
    temp_up_th_sdb: # Pour History Graph
      friendly_name: "Chauffage Température"
      value_template: > 
        {% if is_state('climate.thermostat_sdb_2', 'heat') %}
          Chauffe {{state_attr ('climate.thermostat_sdb_2', 'temperature')}}°
        {% else %}
          Off
        {% endif %}